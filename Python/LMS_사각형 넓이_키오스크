{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNmG+rcnfCa6pi6yPUSZaEW",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Eugene3601/AIFFEL_quest_cr/blob/main/Python/LMS_%EC%82%AC%EA%B0%81%ED%98%95%20%EB%84%93%EC%9D%B4_%ED%82%A4%EC%98%A4%EC%8A%A4%ED%81%AC\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B0XFdTkfFKKG",
        "outputId": "e680a77c-97a2-4c96-8fb6-af33aa19a845"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "넓이를 구하고 싶은 사각형의 숫자를 써주세요.\n",
            "1. 직사각형  2. 평행사변형  3. 사다리꼴 \n",
            " >>> 2\n",
            "평행사변형 함수는 par()입니다.\n",
            "밑변과 높이를 입력하세요. 예시 : 밑변,높이\n",
            " >>> 1,2\n",
            "평행사변형의 넓이는 : 2\n"
          ]
        }
      ],
      "source": [
        " class Square:\n",
        "    def __init__(self):\n",
        "        self.square = int(input('넓이를 구하고 싶은 사각형의 숫자를 써주세요.\\n'\n",
        "                                '1. 직사각형  2. 평행사변형  3. 사다리꼴 \\n >>> '))\n",
        "\n",
        "        if self.square == 1:\n",
        "            print('직사각형 함수는 rect()입니다.')\n",
        "            print(self.rect())\n",
        "        elif self.square == 2:\n",
        "            print('평행사변형 함수는 par()입니다.')\n",
        "            print(self.par())\n",
        "        elif self.square == 3:\n",
        "            print('사다리꼴 함수는 trape()입니다.')\n",
        "            print(self.trape())\n",
        "        else:\n",
        "            print('1, 2, 3 중에서 다시 입력해주세요')\n",
        "\n",
        "    def rect(self):\n",
        "        width, vertical = map(int, input('가로, 세로를 입력하세요. 예시 : 가로,세로\\n >>> ').split(','))\n",
        "        area = width * vertical\n",
        "        result = f'직사각형의 넓이는 : {area}'\n",
        "        return result\n",
        "\n",
        "    def par(self):\n",
        "        base, height = map(int, input('밑변과 높이를 입력하세요. 예시 : 밑변,높이\\n >>> ').split(','))\n",
        "        area = base * height\n",
        "        result = f'평행사변형의 넓이는 : {area}'\n",
        "        return result\n",
        "\n",
        "    def trape(self):\n",
        "        base1, base2, height = map(int, input('윗변, 밑변, 높이를 입력하세요. 예시 : 윗변,밑변,높이\\n >>> ').split(','))\n",
        "        area = (base1 + base2) * height / 2\n",
        "        result = f'사다리꼴의 넓이는 : {area}'\n",
        "        return result\n",
        "\n",
        "# 객체 생성\n",
        "a = Square()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "##주문표 작성 추가한 버전\n",
        "class Kiosk:\n",
        "    def __init__(self):\n",
        "        self.menu = ['americano', 'latte', 'mocha', 'yuza_tea', 'green_tea', 'choco_latte']\n",
        "        self.price = [2000, 3000, 3000, 2500, 2500, 3000]\n",
        "        self.order_menu = []  # 주문 리스트\n",
        "        self.order_price = []  # 가격 리스트\n",
        "        self.order_temp = []  # 온도 리스트\n",
        "\n",
        "    # 메뉴 출력 메서드\n",
        "    def menu_print(self):\n",
        "        print(\"----- 메뉴 -----\")\n",
        "        for i in range(len(self.menu)):\n",
        "            print(f\"{i + 1}. {self.menu[i]} : {self.price[i]}원\")\n",
        "\n",
        "    # 주문 메서드\n",
        "    def menu_select(self):\n",
        "        while True:\n",
        "            try:\n",
        "                # 음료 번호 입력\n",
        "                n = int(input(\"음료 번호를 입력하세요 : \"))  # 음료 번호 입력\n",
        "                if 1 <= n <= len(self.menu):\n",
        "                    self.order_price.append(self.price[n - 1])  # 가격 리스트에 추가\n",
        "                    self.order_menu.append(self.menu[n - 1])  # 주문 리스트에 추가\n",
        "                    print(f\"주문한 음료: {self.menu[n - 1]} : {self.price[n - 1]}원\")\n",
        "                    break\n",
        "                else:\n",
        "                    print(\"없는 메뉴입니다. 다시 주문해 주세요.\")\n",
        "            except ValueError:\n",
        "                print(\"잘못된 입력입니다. 숫자를 입력해 주세요.\")\n",
        "\n",
        "        # 음료 온도 선택\n",
        "        while True:\n",
        "            try:\n",
        "                t = int(input(\"HOT 음료는 1을, ICE 음료는 2를 입력하세요 : \"))\n",
        "                if t == 1:\n",
        "                    self.temp = \"HOT\"\n",
        "                    self.order_temp.append(self.temp)  # 온도 리스트에 추가\n",
        "                    break\n",
        "                elif t == 2:\n",
        "                    self.temp = \"ICE\"\n",
        "                    self.order_temp.append(self.temp)  # 온도 리스트에 추가\n",
        "                    break\n",
        "                else:\n",
        "                    print(\"1과 2 중 하나를 입력하세요.\\n\")\n",
        "            except ValueError:\n",
        "                print(\"잘못된 입력입니다. 숫자를 입력해 주세요.\")\n",
        "\n",
        "        # 선택한 음료와 온도 출력\n",
        "        print(f\"주문 음료: {self.temp} {self.menu[n - 1]} : {self.price[n - 1]}원\")\n",
        "\n",
        "        # 추가 주문 또는 지불\n",
        "        while True:\n",
        "            try:\n",
        "                n = int(input(\"추가 주문은 음료 번호를, 지불은 0을 누르세요 : \"))\n",
        "                if n == 0:\n",
        "                    print(\"주문이 완료되었습니다.\")\n",
        "                    print(\"주문 목록:\", self.order_menu)\n",
        "                    print(\"주문 가격:\", self.order_price)\n",
        "                    total_price = sum(self.order_price)\n",
        "                    print(f\"총 금액: {total_price}원\")\n",
        "                    # 결제 메서드 호출\n",
        "                    self.pay(total_price)\n",
        "                    break\n",
        "                elif 1 <= n <= len(self.menu):\n",
        "                    self.order_price.append(self.price[n - 1])  # 가격 리스트에 추가\n",
        "                    self.order_menu.append(self.menu[n - 1])  # 주문 리스트에 추가\n",
        "\n",
        "                    # 추가 음료 온도 선택\n",
        "                    while True:\n",
        "                        try:\n",
        "                            t = int(input(\"HOT 음료는 1을, ICE 음료는 2를 입력하세요 : \"))\n",
        "                            if t == 1:\n",
        "                                self.temp = \"HOT\"\n",
        "                                self.order_temp.append(self.temp)  # 온도 리스트에 추가\n",
        "                                break\n",
        "                            elif t == 2:\n",
        "                                self.temp = \"ICE\"\n",
        "                                self.order_temp.append(self.temp)  # 온도 리스트에 추가\n",
        "                                break\n",
        "                            else:\n",
        "                                print(\"1과 2 중 하나를 입력하세요.\\n\")\n",
        "                        except ValueError:\n",
        "                            print(\"잘못된 입력입니다. 숫자를 입력해 주세요.\")\n",
        "\n",
        "                    # 추가 주문 음료 출력\n",
        "                    print(f\"추가 주문 음료: {self.temp} {self.menu[n - 1]} : {self.price[n - 1]}원\")\n",
        "                else:\n",
        "                    print(\"없는 메뉴입니다. 다시 주문해 주세요.\")\n",
        "            except ValueError:\n",
        "                print(\"잘못된 입력입니다. 숫자를 입력해 주세요.\")\n",
        "\n",
        "    # 문제 3-2 주문표 출력 메서드\n",
        "    def table(self):\n",
        "        # 외곽선 그리기\n",
        "        print('⟝' + '-' * 30 + '⟞')\n",
        "\n",
        "        # 빈 칸 출력\n",
        "        for i in range(5):\n",
        "            print('|' + ' ' * 31 + '|')\n",
        "\n",
        "        # 주문 상품명과 가격 출력\n",
        "        for i in range(len(self.order_menu)):\n",
        "            print(f\"{self.order_menu[i]} : {self.order_price[i]}원\")\n",
        "\n",
        "        # 합계 금액 출력\n",
        "        print('합계 금액 :', sum(self.order_price))\n",
        "\n",
        "        # 외곽선 다시 그리기\n",
        "        for i in range(5):\n",
        "            print('|' + ' ' * 31 + '|')\n",
        "        print('⟝' + '-' * 30 + '⟞')\n",
        "\n",
        "    # 문제 3-1 지불 메서드\n",
        "    def pay(self, total_price):\n",
        "        while True:\n",
        "            payment_method = input(\"현금은 'cash' 또는 1을, 카드는 'card' 또는 2를 입력하세요 : \").lower()\n",
        "\n",
        "            if payment_method == \"cash\" or payment_method == \"1\":\n",
        "                print(\"직원을 호출하겠습니다.\")\n",
        "                break\n",
        "            elif payment_method == \"card\" or payment_method == \"2\":\n",
        "                print(\"IC칩 방향에 맞게 카드를 꽂아주세요.\")\n",
        "                break\n",
        "            else:\n",
        "                print(\"잘못된 입력입니다. 결제를 다시 시도해 주세요.\")\n",
        "\n",
        "# Kiosk 객체 생성 및 메뉴 출력, 주문 선택\n",
        "a = Kiosk()  # 객체 생성\n",
        "a.menu_print()  # 메뉴 출력\n",
        "a.menu_select()  # 주문\n",
        "a.table()  # 주문표 출력\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oSuSyEFUGDA-",
        "outputId": "0023bcc2-e035-4e2c-b47b-9634f75d971c"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "----- 메뉴 -----\n",
            "1. americano : 2000원\n",
            "2. latte : 3000원\n",
            "3. mocha : 3000원\n",
            "4. yuza_tea : 2500원\n",
            "5. green_tea : 2500원\n",
            "6. choco_latte : 3000원\n",
            "음료 번호를 입력하세요 : 2\n",
            "주문한 음료: latte : 3000원\n",
            "HOT 음료는 1을, ICE 음료는 2를 입력하세요 : 1\n",
            "주문 음료: HOT latte : 3000원\n",
            "추가 주문은 음료 번호를, 지불은 0을 누르세요 : 0\n",
            "주문이 완료되었습니다.\n",
            "주문 목록: ['latte']\n",
            "주문 가격: [3000]\n",
            "총 금액: 3000원\n",
            "현금은 'cash' 또는 1을, 카드는 'card' 또는 2를 입력하세요 : 1\n",
            "직원을 호출하겠습니다.\n",
            "⟝------------------------------⟞\n",
            "|                               |\n",
            "|                               |\n",
            "|                               |\n",
            "|                               |\n",
            "|                               |\n",
            "latte : 3000원\n",
            "합계 금액 : 3000\n",
            "|                               |\n",
            "|                               |\n",
            "|                               |\n",
            "|                               |\n",
            "|                               |\n",
            "⟝------------------------------⟞\n"
          ]
        }
      ]
    }
  ]
}